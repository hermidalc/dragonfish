import re
from glob import glob
from os import getcwd, remove, walk
from os.path import exists, isdir, join, splitext
from shutil import rmtree

from snakemake.utils import makedirs

CONFIG_DIR = "config"
DATA_DIR = "data"
LOG_DIR = "logs"
RESOURCES_DIR = "resources"
RESULTS_DIR = "results"
RULES_DIR = "rules"


configfile: join(CONFIG_DIR, "config.yaml")


NCBI_TAXONOMY_DIR = join(RESOURCES_DIR, "taxonomy")
NCBI_GENOME_DIR = join(RESOURCES_DIR, "genomes")
NCBI_ASSEMBLY_DIR = join(NCBI_GENOME_DIR, "assemblies")
UNIPROT_DIR = join(RESOURCES_DIR, "uniprot")
PUFFERFISH_DIR = join(RESOURCES_DIR, "pufferfish")

NCBI_API_EMAIL = config["ncbi"]["api_email"]
NCBI_API_KEY = config["ncbi"]["api_key"]

NCBI_ACC2TAXID_URL = config["ncbi"]["taxonomy"]["acc2taxid"]["url"]
NCBI_ACC2TAXID_GZ_FILENAMES = config["ncbi"]["taxonomy"]["acc2taxid"]["gz_filenames"]
NCBI_TAXDUMP_URL = config["ncbi"]["taxonomy"]["taxdump"]["url"]
NCBI_TAXDUMP_ZIP_FILENAME = config["ncbi"]["taxonomy"]["taxdump"]["zip_filename"]
NCBI_TAXDUMP_FILENAMES = config["ncbi"]["taxonomy"]["taxdump"]["filenames"]

NCBI_ASSEMBLY_SUMMARY_URL = config["ncbi"]["assembly"]["summary_url"]
NCBI_ASSEMBLY_SUMMARY_FILENAMES = config["ncbi"]["assembly"]["summary_filenames"]
NCBI_ASSEMBLY_FILE_EXTS = config["ncbi"]["assembly"]["file_exts"]
NCBI_ASSEMBLY_FASTA_ID_REGEX = config["ncbi"]["assembly"]["fasta_id_regex"]
NCBI_REFERENCE_FASTA_LINE_WIDTH = config["ncbi"]["assembly"]["fasta_line_width"]
PUFFERFISH_TEMP_DIR = config["pufferfish"]["tmp_dir"]

NCBI_ACC2TAXID_FILENAMES = [
    splitext(filename)[0] for filename in NCBI_ACC2TAXID_GZ_FILENAMES
]
NCBI_ACC2TAXID_GZ_URL = join(NCBI_ACC2TAXID_URL, "{a2t_filename}.gz")
NCBI_ACC2TAXID_GZ_FILE = join(NCBI_TAXONOMY_DIR, "{a2t_filename}.gz")
NCBI_ACC2TAXID_FILE = join(NCBI_TAXONOMY_DIR, "{a2t_filename}")
NCBI_TAXDUMP_ZIP_URL = join(NCBI_TAXDUMP_URL, NCBI_TAXDUMP_ZIP_FILENAME)
NCBI_TAXDUMP_ZIP_FILE = join(NCBI_TAXONOMY_DIR, NCBI_TAXDUMP_ZIP_FILENAME)
NCBI_TAXDUMP_FILES = [
    join(NCBI_TAXONOMY_DIR, filename) for filename in NCBI_TAXDUMP_FILENAMES
]
NCBI_ASSEMBLY_SUMMARY_BASENAMES, NCBI_ASSEMBLY_SUMMARY_EXTS = zip(
    *(
        (splitext(filename)[0], splitext(filename)[1].replace(".", "", 1))
        for filename in NCBI_ASSEMBLY_SUMMARY_FILENAMES
    )
)
NCBI_ASSEMBLY_SUMMARY_FILE_URL = join(
    NCBI_ASSEMBLY_SUMMARY_URL, "{asu_basename}.{asu_ext}"
)
NCBI_ASSEMBLY_SUMMARY_FILE = join(NCBI_GENOME_DIR, "{asu_basename}.{asu_ext}")
NCBI_ASSEMBLY_SUMMARY_FILES = [
    join(NCBI_GENOME_DIR, filename) for filename in NCBI_ASSEMBLY_SUMMARY_FILENAMES
]
NCBI_MERGED_ASSEMBLY_SUMMARY_FILE = join(NCBI_GENOME_DIR, "assembly_summary_merged.txt")
UNIPROT_PROTEOME_METADATA_FILE = join(UNIPROT_DIR, "uniprot_proteome_metadata.tsv")
NCBI_ASSEMBLY_FASTA_LIST_FILE = join(NCBI_GENOME_DIR, "assembly_fasta_list.txt")
NCBI_REFERENCE_FASTA_FILE = join(NCBI_GENOME_DIR, "reference.fa.gz")
PUFFERFISH_INDEX_DIR = join(PUFFERFISH_DIR, "index")

NCBI_GENOME_LOG_DIR = join(LOG_DIR, "genomes")
NCBI_ASSEMBLY_LOG_DIR = join(NCBI_GENOME_LOG_DIR, "assemblies")
NCBI_TAXNOMY_LOG_DIR = join(LOG_DIR, "taxonomy")
UNIPROT_LOG_DIR = join(LOG_DIR, "uniprot")
PUFFERFISH_LOG_DIR = join(LOG_DIR, "pufferfish")

NCBI_ACC2TAXID_GZ_LOG = join(NCBI_TAXNOMY_LOG_DIR, "get_{a2t_filename}_gz.log")
NCBI_ACC2TAXID_LOG = join(NCBI_TAXNOMY_LOG_DIR, "gunzip_{a2t_filename}_gz.log")
NCBI_TAXDUMP_ZIP_LOG = join(NCBI_TAXNOMY_LOG_DIR, "get_ncbi_taxdump_zip.log")
NCBI_TAXDUMP_FILES_LOG = join(NCBI_TAXNOMY_LOG_DIR, "unzip_ncbi_taxdump.log")
NCBI_ASSEMBLY_SUMMARY_LOG = join(
    NCBI_GENOME_LOG_DIR, "get_{asu_basename}_{asu_ext}.log"
)
NCBI_MERGED_ASSEMBLY_SUMMARY_LOG = join(
    NCBI_GENOME_LOG_DIR, "merge_ncbi_assembly_summaries.log"
)
UNIPROT_PROTEOME_METADATA_LOG = join(
    UNIPROT_LOG_DIR, "get_uniprot_proteome_metadata.log"
)
NCBI_ASSEMBLY_FILES_LOG = join(NCBI_GENOME_LOG_DIR, "get_ncbi_assembly_files.log")
NCBI_REFERENCE_FASTA_LOG = join(NCBI_GENOME_LOG_DIR, "create_ncbi_reference_fasta.log")
PUFFERFISH_INDEX_LOG = join(PUFFERFISH_LOG_DIR, "create_pufferfish_index.log")

SEQKIT_SEQ_WRAPPER = join(config["wrapper"]["base_url"], "bio/seqkit/seq")
PUFFERFISH_INDEX_WRAPPER = join(config["wrapper"]["base_url"], "bio/pufferfish/index")


include: join(RULES_DIR, "proteomes.smk")
include: join(RULES_DIR, "genomes.smk")
include: join(RULES_DIR, "taxonomy.smk")
include: join(RULES_DIR, "pufferfish.smk")


makedirs(LOG_DIR)


wildcard_constraints:
    asu_basename="|".join(set(re.escape(x) for x in NCBI_ASSEMBLY_SUMMARY_BASENAMES)),
    asu_ext="|".join(set(re.escape(x) for x in NCBI_ASSEMBLY_SUMMARY_EXTS)),
    a2t_filename="|".join(set(re.escape(x) for x in NCBI_ACC2TAXID_FILENAMES)),


rule all:
    input:
        expand(NCBI_ACC2TAXID_GZ_FILE, zip, a2t_filename=NCBI_ACC2TAXID_FILENAMES),
        expand(NCBI_ACC2TAXID_FILE, zip, a2t_filename=NCBI_ACC2TAXID_FILENAMES),
        NCBI_TAXDUMP_ZIP_FILE,
        NCBI_TAXDUMP_FILES,
        expand(
            NCBI_ASSEMBLY_SUMMARY_FILE,
            zip,
            asu_basename=NCBI_ASSEMBLY_SUMMARY_BASENAMES,
            asu_ext=NCBI_ASSEMBLY_SUMMARY_EXTS,
        ),
        NCBI_MERGED_ASSEMBLY_SUMMARY_FILE,
        UNIPROT_PROTEOME_METADATA_FILE,
        NCBI_ASSEMBLY_FASTA_LIST_FILE,
        NCBI_REFERENCE_FASTA_FILE,
        PUFFERFISH_INDEX_DIR,


def clean(*dirs):
    for clean_dir in dirs:
        for file in glob(join(clean_dir, "*")):
            if isdir(file):
                rmtree(file)
            else:
                remove(file)
        for dirpath, dirnames, filenames in sorted(walk(getcwd())):
            for name in dirnames:
                if name == "__pycache__":
                    rmtree(join(dirpath, name))


rule clean:
    run:
        clean(RESULTS_DIR, LOG_DIR)


rule clean_all:
    run:
        clean(RESOURCES_DIR, RESULTS_DIR, LOG_DIR)
