import re
from os import getcwd, walk
from os.path import basename, dirname, exists, join, splitext
from tempfile import gettempdir
from shutil import rmtree
from urllib.parse import urlparse

import pandas as pd
from snakemake.utils import validate

CONFIG_DIR = "config"
DATA_DIR = "data"
LOG_DIR = "logs"
RESOURCES_DIR = "resources"
RESULTS_DIR = "results"
RULES_DIR = "rules"


configfile: join(CONFIG_DIR, "config.yaml")


STUDY_NAME = config["study"]["name"]
SAMPLE_CONFIG_FILE = config["study"]["samples"]
UNIT_CONFIG_FILE = config["study"]["units"]

TEMP_DIR = config["tmp_dir"] if config["tmp_dir"] else gettempdir()

EXPAND_PARAMS = {}

EXPAND_PARAMS["anal_mode"] = config["analysis_modes"]

SAMPLE_DF = pd.read_csv(
    SAMPLE_CONFIG_FILE, sep="\t", dtype={"sample_name": str, "sample_label": str}
).set_index("sample_name", drop=False, verify_integrity=True)
validate(SAMPLE_DF, schema="schemas/samples.schema.yaml")

UNIT_DF = pd.read_csv(
    UNIT_CONFIG_FILE, sep="\t", dtype={"sample_name": str, "unit_name": str}
)
validate(UNIT_DF, schema="schemas/units.schema.yaml")

if UNIT_DF["unit_name"].isna().all():
    UNIT_DF.set_index("sample_name", inplace=True, drop=False, verify_integrity=True)
    RUN_ID_WILDCARD_STR = "{sample}"
    SAMPLES = UNIT_DF["sample_name"].tolist()
    EXPAND_PARAMS["sample"] = SAMPLES
else:
    UNIT_DF.set_index(
        ["sample_name", "unit_name"], inplace=True, drop=False, verify_integrity=True
    )
    RUN_ID_WILDCARD_STR = "{sample}_{unit}"
    SAMPLES = UNIT_DF["sample_name"].tolist()
    UNITS = UNIT_DF["unit_name"].tolist()
    EXPAND_PARAMS["sample"] = SAMPLES
    EXPAND_PARAMS["unit"] = UNITS

SAMPLE_DF = SAMPLE_DF.loc[SAMPLES]

SAMPLE_LABELS = [
    n if pd.isna(l) else l
    for n, l in zip(SAMPLE_DF["sample_name"], SAMPLE_DF["sample_label"])
]

EXPAND_PARAMS["data_subdir"] = [dirname(fq) for fq in UNIT_DF["fq1"]]

UNIPROT_DIR = join(RESOURCES_DIR, "uniprot")
NCBI_GENOME_DIR = join(RESOURCES_DIR, "genomes")
NCBI_ASSEMBLY_DIR = join(NCBI_GENOME_DIR, "assemblies")
NCBI_TAXONOMY_DIR = join(RESOURCES_DIR, "taxonomy")
DIAMOND_RESOURCES_DIR = join(RESOURCES_DIR, "diamond")
PALADIN_RESOURCES_DIR = join(RESOURCES_DIR, "paladin")
REF_DIR = join(RESOURCES_DIR, "ref")
GENCODE_DIR = join(RESOURCES_DIR, "gencode")
T2T_DIR = join(RESOURCES_DIR, "t2t")
PUFFERFISH_RESOURCES_DIR = join(RESOURCES_DIR, "pufferfish")

PUBLIC_WRAPPERS_VERSION = config["wrappers"]["public"]["version"]
PERSONAL_WRAPPERS_BASE_URL = config["wrappers"]["personal"]["base_url"]
LOCAL_WRAPPERS_BASE_URL = config["wrappers"]["local"]["base_url"]

UNIPROT_KB_URL = config["uniprot"]["kb"]["url"]
UNIPROT_KB_TYPES = config["uniprot"]["kb"]["types"]
UNIPROT_KB_IDMAP_URL = config["uniprot"]["kb"]["idmap"]["url"]
UNIPROT_KB_IDMAP_FILENAME = config["uniprot"]["kb"]["idmap"]["filename"]

NCBI_TAXDUMP_URL = config["ncbi"]["taxonomy"]["taxdump"]["url"]
NCBI_TAXDUMP_ZIP_FILENAME = config["ncbi"]["taxonomy"]["taxdump"]["zip_filename"]
NCBI_TAXDUMP_FILENAMES = config["ncbi"]["taxonomy"]["taxdump"]["filenames"]
NCBI_ACC2TAXID_URL = config["ncbi"]["taxonomy"]["acc2taxid"]["url"]
NCBI_ACC2TAXID_FILENAMES = config["ncbi"]["taxonomy"]["acc2taxid"]["filenames"]

NCBI_ASSEMBLY_SUMMARY_URL = config["ncbi"]["assembly"]["summary"]["url"]
NCBI_ASSEMBLY_SUMMARY_FILENAMES = config["ncbi"]["assembly"]["summary"]["filenames"]

GENCODE_PROTOCOL = config["gencode"]["protocol"]
GENCODE_REGIONS = config["gencode"]["regions"]
GENCODE_ANNOT_FMT = config["gencode"]["annot"]["fmt"]
T2T_GENOME_FASTA_URL = config["t2t"]["fasta_url"]

HOST_FILTER_TYPE = config["host_filter"]["type"]
HOST_FILTER_MODE = config["host_filter"]["mode"]

FASTQ_DATA_DIR = config["fastq"]["data_dir"]
FASTQ_MATES = config["fastq"]["mates"]
FASTQ_EXT = config["fastq"]["ext"]
FASTQ_PLATFORM = config["fastq"]["platform"]

EXPAND_PARAMS["ukb_basename"] = [f"uniprot_{t}" for t in UNIPROT_KB_TYPES]
EXPAND_PARAMS["ukb_dbxref_db"] = [
    db.lower() for db in config["uniprot"]["kb"]["dbxref"]["dbs"]
]

UNIPROT_PROTEOMES_FILE = join(UNIPROT_DIR, "uniprot_proteomes.tsv")
UNIPROT_KB_XML_URL = join(UNIPROT_KB_URL, "{ukb_basename}.xml.gz")
UNIPROT_KB_XML_FILE = join(UNIPROT_DIR, "{ukb_basename}.xml.gz")
UNIPROT_KB_FASTA_URL = join(UNIPROT_KB_URL, "{ukb_basename}.fasta.gz")
UNIPROT_KB_FASTA_FILE = join(UNIPROT_DIR, "{ukb_basename}.fasta.gz")
UNIPROT_KB_MERGED_FASTA_FILE = join(UNIPROT_DIR, "uniprot_merged.fasta.gz")
UNIPROT_KB_XML_SPLIT_POS_FILE = join(UNIPROT_DIR, "{ukb_basename}_xml_split_pos.txt")
UNIPROT_KB_DBXREF_SPLIT_DIR = join(UNIPROT_DIR, "dbxref")
UNIPROT_KB_DBXREF_SPLIT_FILE = join(
    UNIPROT_KB_DBXREF_SPLIT_DIR, "{ukb_basename}_dbxref_{ukb_snum}.hdf5"
)
UNIPROT_KB_DBXREF_SPLIT_FILES = []
for i, ukb_basename in enumerate(EXPAND_PARAMS["ukb_basename"]):
    UNIPROT_KB_DBXREF_SPLIT_FILES.extend(
        expand(
            UNIPROT_KB_DBXREF_SPLIT_FILE,
            ukb_basename=ukb_basename,
            ukb_snum=list(
                str(x).zfill(3)
                for x in range(
                    1,
                    int(float(config["uniprot"]["kb"]["parse"]["num_splits"][i])) + 1,
                )
            ),
        )
    )
UNIPROT_KB_DBXREF_FILE = join(UNIPROT_DIR, "uniprot_dbxref.hdf5")
UNIPROT_KB_IDMAP_FILE_URL = join(UNIPROT_KB_IDMAP_URL, UNIPROT_KB_IDMAP_FILENAME)
UNIPROT_KB_IDMAP_FILE = join(UNIPROT_DIR, UNIPROT_KB_IDMAP_FILENAME)
UNIPROT_KB_GENBANK_IDMAP_FILE = join(UNIPROT_DIR, "uniprot_genbank_idmap.hdf5")
UNIPROT_KB_GENBANK_IDMAP_DBXREF_FILE = join(
    UNIPROT_DIR, "uniprot_genbank_idmap_{ukb_dbxref_db}.hdf5"
)
UNIPROT_KB_TAXID_MAP_FILE = join(UNIPROT_DIR, "uniprot_kb_taxid_map.tsv")

EXPAND_PARAMS["a2t_basename"] = [
    splitext(filename)[0] for filename in NCBI_ACC2TAXID_FILENAMES
]

NCBI_TAXDUMP_ZIP_URL = join(NCBI_TAXDUMP_URL, NCBI_TAXDUMP_ZIP_FILENAME)
NCBI_TAXDUMP_ZIP_FILE = join(NCBI_TAXONOMY_DIR, NCBI_TAXDUMP_ZIP_FILENAME)
NCBI_TAXDUMP_FILES = [
    join(NCBI_TAXONOMY_DIR, filename) for filename in NCBI_TAXDUMP_FILENAMES
]
NCBI_TAXDUMP_NODE_FILE = join(NCBI_TAXONOMY_DIR, "nodes.dmp")
NCBI_TAXDUMP_NAME_FILE = join(NCBI_TAXONOMY_DIR, "names.dmp")
NCBI_TAXDUMP_FIXED_NODE_FILE = join(NCBI_TAXONOMY_DIR, "nodes_fixed.dmp")

NCBI_ACC2TAXID_URL = join(NCBI_ACC2TAXID_URL, "{a2t_basename}.gz")
NCBI_ACC2TAXID_FILE = join(NCBI_TAXONOMY_DIR, "{a2t_basename}.gz")

DIAMOND_UNIPROT_DB_FILE = join(DIAMOND_RESOURCES_DIR, "uniprot.dmnd")
PALADIN_UNIPROT_INDEX_DIR = join(PALADIN_RESOURCES_DIR, "uniprot")

EXPAND_PARAMS["asu_basename"] = [
    splitext(filename)[0] for filename in NCBI_ASSEMBLY_SUMMARY_FILENAMES
]
EXPAND_PARAMS["asm_type"] = ["genomic"]

NCBI_ASSEMBLY_SUMMARY_FILE_URL = join(NCBI_ASSEMBLY_SUMMARY_URL, "{asu_basename}.txt")
NCBI_ASSEMBLY_SUMMARY_FILE = join(NCBI_GENOME_DIR, "{asu_basename}.txt")
NCBI_ASSEMBLY_SUMMARY_FILES = [
    join(NCBI_GENOME_DIR, filename) for filename in NCBI_ASSEMBLY_SUMMARY_FILENAMES
]
NCBI_ASSEMBLY_MERGED_SUMMARY_FILE = join(NCBI_GENOME_DIR, "assembly_summary_merged.txt")
NCBI_ASSEMBLY_FILTERED_SUMMARY_FILE = join(
    NCBI_GENOME_DIR, "assembly_summary_filtered.txt"
)
NCBI_ASSEMBLY_TAXID_MAP_FILE = join(NCBI_GENOME_DIR, "assembly_taxid_map.tsv")
NCBI_ASSEMBLY_FASTA_LIST_FILE = join(
    NCBI_GENOME_DIR, "assembly_{asm_type}_fasta_list.txt"
)
NCBI_ASSEMBLY_GFF_FILE = join(
    NCBI_ASSEMBLY_DIR, "{asm_dir}", "{asm_dir}_genomic.gff.gz"
)
NCBI_ASSEMBLY_CDS_GTF_FILE = join(
    NCBI_ASSEMBLY_DIR, "{asm_dir}", "{asm_dir}_genomic_cds.gtf"
)
NCBI_ASSEMBLY_MERGED_CDS_GTF_FILE = join(NCBI_GENOME_DIR, "assembly_genomic_cds.gtf.gz")

GENCODE_SPECIES = "{gc_species}"
GENCODE_RELEASE = "{gc_release}"
GENCODE_BUILD = "{gc_build}"

EXPAND_PARAMS["gc_species"] = config["gencode"]["species"]
EXPAND_PARAMS["gc_release"] = config["gencode"]["releases"]
EXPAND_PARAMS["gc_build"] = config["gencode"]["builds"]

GENCODE_GENOME_NAME = f"{GENCODE_SPECIES}_{GENCODE_RELEASE}_{GENCODE_BUILD}"
GENCODE_GENOME_FASTA_FILE = join(GENCODE_DIR, f"{GENCODE_GENOME_NAME}.fa.gz")
GENCODE_GENOME_FIXED_FASTA_FILE = join(
    GENCODE_DIR, f"{GENCODE_GENOME_NAME}_fixed.fa.gz"
)
GENCODE_GENOME_FIXED_FASTA_ID_FILE = join(
    GENCODE_DIR, f"{GENCODE_GENOME_NAME}_fixed_fasta_ids.txt"
)
GENCODE_GENOME_MERGED_FIXED_FASTA_ID_FILE = join(
    GENCODE_DIR, "merged_fixed_fasta_ids.txt"
)
GENCODE_GENOME_ANNOT_FILE = join(
    GENCODE_DIR, f"{GENCODE_GENOME_NAME}.{GENCODE_ANNOT_FMT.lower()}.gz"
)

T2T_GENOME_FASTA_FILE_GZ_NAME = basename(urlparse(T2T_GENOME_FASTA_URL).path)
T2T_GENOME_FASTA_FILE_NAME = T2T_GENOME_FASTA_FILE_GZ_NAME.removesuffix(
    ".gz"
).removesuffix(".GZ")
T2T_GENOME_FASTA_FILE = join(T2T_DIR, T2T_GENOME_FASTA_FILE_NAME)
T2T_GENOME_FASTA_LOG = join(
    LOG_DIR, "t2t", f"download_{T2T_GENOME_FASTA_FILE_NAME}.log"
)

HOST_GENOME_INDEX_DIR = join(RESOURCES_DIR, HOST_FILTER_MODE, "index")
HOST_GENOME_LOG_DIR = join(LOG_DIR, HOST_FILTER_MODE, "index")
HOST_GENOME_INDEX_PREFIX = join(HOST_GENOME_INDEX_DIR, config[HOST_FILTER_TYPE]["name"])
HOST_GENOME_INDEX_LOG = join(
    HOST_GENOME_LOG_DIR, f"{config[HOST_FILTER_TYPE]['name']}.log"
)

EXPAND_PARAMS["ref_decoy"] = (
    ["with_decoys"] if config["host_filter"]["mode"] == "decoys" else ["no_decoys"]
)

REF_FASTA_FILE = join(REF_DIR, "ref_{asm_type}.fa.gz")
REF_DEDUPED_ID_FASTA_FILE = join(REF_DIR, "ref_{asm_type}_deduped_id.fa.gz")
REF_DEDUPED_ID_WITH_DECOY_FASTA_FILE = join(
    REF_DIR, "ref_{asm_type}_deduped_id_{ref_decoy}.fa.gz"
)

PUFFERFISH_INDEX_DIR = join(
    PUFFERFISH_RESOURCES_DIR, "index", "{asm_type}_deduped_id_{ref_decoy}"
)

TRIMMED_RESULTS_DIR = join(RESULTS_DIR, "fastp", "{data_subdir}")

FASTQ1_FILE = join(
    FASTQ_DATA_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_MATES[0]}.{FASTQ_EXT}"
)
FASTQ2_FILE = join(
    FASTQ_DATA_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_MATES[1]}.{FASTQ_EXT}"
)
TRIMMED_FASTQ1_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_MATES[0]}.{FASTQ_EXT}"
)
TRIMMED_FASTQ2_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_{FASTQ_MATES[1]}.{FASTQ_EXT}"
)
TRIMMED_UNPAIR1_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_unpaired1.{FASTQ_EXT}"
)
TRIMMED_UNPAIR2_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_unpaired2.{FASTQ_EXT}"
)
FAILED_READS_FILE = join(
    TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_failed.{FASTQ_EXT}"
)
FASTP_HTML_REPORT_FILE = join(TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_report.html")
FASTP_JSON_REPORT_FILE = join(TRIMMED_RESULTS_DIR, f"{RUN_ID_WILDCARD_STR}_report.json")

PUFFERFISH_RESULTS_DIR = join(RESULTS_DIR, "pufferfish", "{data_subdir}")

EXPAND_PARAMS["pfa_type"] = ["pam", "sam"]

PUFFERFISH_ALIGN_FILE = join(
    PUFFERFISH_RESULTS_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}.{{pfa_type}}",
)
PUFFERFISH_SAM_FILE = join(
    PUFFERFISH_RESULTS_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}.sam",
)
PUFFERFISH_PAM_FILE = join(
    PUFFERFISH_RESULTS_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}.pam",
)
PUFFERFISH_UNMAPPED_BAM_FILE = join(
    PUFFERFISH_RESULTS_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}_unmapped.bam",
)
PUFFERFISH_UNMAPPED_FASTQ_FILE = join(
    PUFFERFISH_RESULTS_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}_unmapped.fastq.gz",
)

DATA_MATRIX_RESULTS_DIR = join(RESULTS_DIR, "data_matrix", STUDY_NAME)

FEATURECOUNTS_CDS_READ_QUANT_FILE = join(
    DATA_MATRIX_RESULTS_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cds_counts.tsv.gz",
)
FEATURECOUNTS_CDS_COUNT_MATRIX_FILE = join(
    DATA_MATRIX_RESULTS_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cds_counts.hdf5",
)
FEATURECOUNTS_DBXREF_CDS_COUNT_MATRIX_FILE = join(
    DATA_MATRIX_RESULTS_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_{{ukb_dbxref_db}}_cds_counts.hdf5",
)
FEATURECOUNTS_DBXREF_CDS_COUNT_ESET_FILE = join(
    DATA_MATRIX_RESULTS_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_{{ukb_dbxref_db}}_cds_counts.rds",
)

CEDAR_TAX_READ_QUANT_FILE = join(
    PUFFERFISH_RESULTS_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}_cedar.tsv",
)
CEDAR_TAX_COUNT_MATRIX_FILE = join(
    DATA_MATRIX_RESULTS_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cedar_tax_counts.tsv",
)
CEDAR_TAX_COUNT_ESET_FILE = join(
    DATA_MATRIX_RESULTS_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cedar_tax_counts.rds",
)

UNIPROT_LOG_DIR = join(LOG_DIR, "uniprot")
NCBI_GENOME_LOG_DIR = join(LOG_DIR, "genomes")
NCBI_ASSEMBLY_LOG_DIR = join(NCBI_GENOME_LOG_DIR, "assemblies")
NCBI_TAXNOMY_LOG_DIR = join(LOG_DIR, "taxonomy")
DIAMOND_LOG_DIR = join(LOG_DIR, "diamond")
PALADIN_LOG_DIR = join(LOG_DIR, "paladin")
GENCODE_LOG_DIR = join(LOG_DIR, "gencode")
REF_LOG_DIR = join(LOG_DIR, "ref")
FASTP_LOG_DIR = join(LOG_DIR, "fastp", "{data_subdir}")
PUFFERFISH_LOG_DIR = join(LOG_DIR, "pufferfish")
PUFFERFISH_ALIGN_LOG_DIR = join(PUFFERFISH_LOG_DIR, "align", "{data_subdir}")
DATA_MATRIX_LOG_DIR = join(LOG_DIR, "data_matrix", STUDY_NAME)

UNIPROT_PROTEOMES_LOG = join(UNIPROT_LOG_DIR, "uniprot_proteomes.log")
UNIPROT_KB_XML_LOG = join(UNIPROT_LOG_DIR, "{ukb_basename}_xml.log")
UNIPROT_KB_FASTA_LOG = join(UNIPROT_LOG_DIR, "{ukb_basename}_fasta.log")
UNIPROT_KB_MERGED_FASTA_LOG = join(UNIPROT_LOG_DIR, "uniprot_merged_fasta.log")
UNIPROT_KB_XML_SPLIT_POS_LOG = join(UNIPROT_LOG_DIR, "{ukb_basename}_xml_split_pos.log")
UNIPROT_KB_DBXREF_SPLIT_LOG = join(
    UNIPROT_LOG_DIR, "{ukb_basename}_dbxref_{ukb_snum}.log"
)
UNIPROT_KB_DBXREF_LOG = join(UNIPROT_LOG_DIR, "uniprot_kb_merged_dbxref.log")
UNIPROT_KB_IDMAP_LOG = join(UNIPROT_LOG_DIR, "uniprot_kb_idmap.log")
UNIPROT_KB_GENBANK_IDMAP_LOG = join(UNIPROT_LOG_DIR, "uniprot_kb_genbank_idmap.log")
UNIPROT_KB_GENBANK_IDMAP_DBXREF_LOG = join(
    UNIPROT_LOG_DIR, "uniprot_kb_genbank_idmap_{ukb_dbxref_db}.log"
)
UNIPROT_KB_TAXID_MAP_LOG = join(UNIPROT_LOG_DIR, "uniprot_kb_taxid_map.log")

NCBI_TAXDUMP_ZIP_LOG = join(NCBI_TAXNOMY_LOG_DIR, "ncbi_taxdump_zip.log")
NCBI_TAXDUMP_FILES_LOG = join(NCBI_TAXNOMY_LOG_DIR, "ncbi_taxdump_files.log")
NCBI_TAXDUMP_FIXED_NODE_LOG = join(NCBI_TAXNOMY_LOG_DIR, "ncbi_taxdump_fixed_nodes.log")
NCBI_ACC2TAXID_LOG = join(NCBI_TAXNOMY_LOG_DIR, "ncbi_{a2t_basename}.log")

DIAMOND_UNIPROT_DB_LOG = join(DIAMOND_LOG_DIR, "uniprot_dmnd.log")
PALADIN_UNIPROT_INDEX_LOG = join(PALADIN_LOG_DIR, "uniprot_index.log")

NCBI_ASSEMBLY_SUMMARY_LOG = join(NCBI_GENOME_LOG_DIR, "ncbi_{asu_basename}.log")
NCBI_ASSEMBLY_MERGED_SUMMARY_LOG = join(
    NCBI_GENOME_LOG_DIR, "ncbi_assembly_merged_summary.log"
)
NCBI_ASSEMBLY_FILTERED_SUMMARY_LOG = join(
    NCBI_GENOME_LOG_DIR, "ncbi_assembly_filtered_summary.log"
)
NCBI_ASSEMBLY_TAXID_MAP_LOG = join(NCBI_GENOME_LOG_DIR, "ncbi_assembly_taxid_map.log")
NCBI_ASSEMBLY_FILES_LOG = join(NCBI_GENOME_LOG_DIR, "ncbi_assemblies.log")
NCBI_ASSEMBLY_FASTA_LIST_LOG = join(
    NCBI_GENOME_LOG_DIR, "ncbi_assembly_{asm_type}_fasta_list.log"
)
NCBI_ASSEMBLY_CDS_GTF_LOG = join(NCBI_ASSEMBLY_LOG_DIR, "{asm_dir}_genomic_cds_gtf.log")
NCBI_ASSEMBLY_MERGED_CDS_GTF_LOG = join(
    NCBI_GENOME_LOG_DIR, "ncbi_assembly_genomic_cds_gtf.log"
)

GENCODE_GENOME_FIXED_FASTA_LOG = join(
    GENCODE_LOG_DIR, f"gencode_{GENCODE_GENOME_NAME}_fa.log"
)
GENCODE_GENOME_FIXED_FASTA_ID_LOG = join(
    GENCODE_LOG_DIR, f"gencode_{GENCODE_GENOME_NAME}_fasta_ids.log"
)
GENCODE_GENOME_MERGED_FIXED_FASTA_ID_LOG = join(
    GENCODE_LOG_DIR, "gencode_genome_merged_fixed_fasta_ids.log"
)

REF_FASTA_LOG = join(REF_LOG_DIR, "ref_{asm_type}_deduped_id_fasta.log")
REF_DEDUPED_ID_FASTA_LOG = join(REF_LOG_DIR, "ref_{asm_type}_deduped_id_fasta.log")
REF_DEDUPED_ID_WITH_DECOY_FASTA_LOG = join(
    REF_LOG_DIR, "ref_{asm_type}_deduped_id_{ref_decoy}_fasta.log"
)

PUFFERFISH_INDEX_LOG_DIR = join(PUFFERFISH_LOG_DIR, "index")
PUFFERFISH_INDEX_LOG = join(
    PUFFERFISH_INDEX_LOG_DIR, "pufferfish_{asm_type}_deduped_id_{ref_decoy}_index.log"
)

FASTP_LOG = join(FASTP_LOG_DIR, f"{RUN_ID_WILDCARD_STR}.log")

PUFFERFISH_ALIGN_LOG = join(
    PUFFERFISH_ALIGN_LOG_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}_{{pfa_type}}.log",
)
PUFFERFISH_UNMAPPED_BAM_LOG = join(
    PUFFERFISH_ALIGN_LOG_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}_unmapped_bam.log",
)
PUFFERFISH_UNMAPPED_FASTQ_LOG = join(
    PUFFERFISH_ALIGN_LOG_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}_unmapped_fastq.log",
)

FEATURECOUNTS_CDS_READ_QUANT_LOG = join(
    DATA_MATRIX_LOG_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cds_counts_tsv.log",
)
FEATURECOUNTS_CDS_COUNT_MATRIX_LOG = join(
    DATA_MATRIX_LOG_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cds_counts_hdf.log",
)
FEATURECOUNTS_DBXREF_CDS_COUNT_MATRIX_LOG = join(
    DATA_MATRIX_LOG_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_{{ukb_dbxref_db}}_cds_counts.log",
)

CEDAR_TAX_READ_QUANT_LOG = join(
    PUFFERFISH_ALIGN_LOG_DIR,
    f"{RUN_ID_WILDCARD_STR}_{{asm_type}}_deduped_id_{{ref_decoy}}_cedar_tax_tsv.log",
)

CEDAR_TAX_COUNT_MATRIX_LOG = join(
    DATA_MATRIX_LOG_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cedar_tax_counts_tsv.log",
)
CEDAR_TAX_COUNT_ESET_LOG = join(
    DATA_MATRIX_LOG_DIR,
    f"{STUDY_NAME}_{{asm_type}}_deduped_id_{{ref_decoy}}_cedar_tax_counts_rds.log",
)

PIGZ_THREADS = (
    workflow.cores if config["pigz"]["threads"] == "all" else config["pigz"]["threads"]
)
UNIPROT_KB_GENBANK_IDMAP_DBXREF_THREADS = (
    workflow.cores
    if config["uniprot"]["kb"]["idmap"]["threads"] == "all"
    else config["uniprot"]["kb"]["idmap"]["threads"]
)
NCBI_ASSEMBLY_FILE_DOWNLOAD_THREADS = (
    workflow.cores
    if config["ncbi"]["assembly"]["file"]["download"]["threads"] == "all"
    else config["ncbi"]["assembly"]["file"]["download"]["threads"]
)
HOST_BUILD_THREADS = (
    workflow.cores
    if config[HOST_FILTER_MODE]["build"]["threads"] == "all"
    else config[HOST_FILTER_MODE]["build"]["threads"]
)
HOST_ALIGN_THREADS = (
    workflow.cores
    if config[HOST_FILTER_MODE]["align"]["threads"] == "all"
    else config[HOST_FILTER_MODE]["align"]["threads"]
)
PUFFERFISH_INDEX_THREADS = (
    workflow.cores
    if config["pufferfish"]["index"]["threads"] == "all"
    else config["pufferfish"]["index"]["threads"]
)
PUFFERFISH_ALIGN_THREADS = (
    workflow.cores
    if config["pufferfish"]["align"]["threads"] == "all"
    else config["pufferfish"]["align"]["threads"]
)
FEATURECOUNTS_THREADS = (
    min([workflow.cores, 32])
    if config["featurecounts"]["threads"] == "all"
    else config["featurecounts"]["threads"]
)
SAMTOOLS_THREADS = (
    workflow.cores
    if config["samtools"]["threads"] == "all"
    else config["samtools"]["threads"]
)
CEDAR_TAX_READ_QUANT_THREADS = (
    workflow.cores
    if config["pufferfish"]["cedar"]["threads"] == "all"
    else config["pufferfish"]["cedar"]["threads"]
)
DIAMOND_THREADS = (
    workflow.cores
    if config["translated_search"]["diamond"]["threads"] == "all"
    else config["translated_search"]["diamond"]["threads"]
)
PALADIN_THREADS = (
    workflow.cores
    if config["translated_search"]["paladin"]["threads"] == "all"
    else config["translated_search"]["paladin"]["threads"]
)

GENCODE_GENOME_SEQ_WRAPPER = join(
    LOCAL_WRAPPERS_BASE_URL, "bio/reference/gencode/sequence"
)
GENCODE_GENOME_ANNOT_WRAPPER = join(
    LOCAL_WRAPPERS_BASE_URL, "bio/reference/gencode/annotation"
)
HOST_BUILD_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, f"bio/{HOST_FILTER_MODE}/build")
HOST_ALIGN_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, f"bio/{HOST_FILTER_MODE}/align")
SEQKIT_BAM_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/seqkit/bam")
SEQKIT_GREP_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/seqkit/grep")
SEQKIT_RENAME_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/seqkit/rename")
SEQKIT_REPLACE_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/seqkit/replace")
SEQKIT_SEQ_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/seqkit/seq")
PUFFERFISH_INDEX_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/pufferfish/index")
FASTP_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/fastp")
PUFFERFISH_ALIGN_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/pufferfish/align")
SAMTOOLS_FASTQ_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/samtools/fastq")
SAMTOOLS_VIEW_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/samtools/view")
FEATURECOUNTS_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/subread/featurecounts")
CEDAR_TAX_READ_QUANT_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/pufferfish/cedar")
DATA_MATRIX_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/pufferfish/data_matrix")
ESET_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/biobase/eset")
DIAMOND_MAKEDB_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/diamond/makedb")
PALADIN_INDEX_WRAPPER = join(LOCAL_WRAPPERS_BASE_URL, "bio/paladin/index")


include: join(RULES_DIR, "common.smk")
include: join(RULES_DIR, "proteomes.smk")
include: join(RULES_DIR, "microbe_genomes.smk")
include: join(RULES_DIR, "taxonomy.smk")
include: join(RULES_DIR, "host_genomes.smk")
include: join(RULES_DIR, "host_filter.smk")
include: join(RULES_DIR, "ref.smk")
include: join(RULES_DIR, "index.smk")
include: join(RULES_DIR, "trim.smk")
include: join(RULES_DIR, "align.smk")
include: join(RULES_DIR, "quant.smk")
include: join(RULES_DIR, "data_matrix.smk")
include: join(RULES_DIR, "translated_search.smk")


wildcard_constraints:
    **{w: "|".join(set([re.escape(v) for v in l])) for w, l in EXPAND_PARAMS.items()},


rule all:
    input:
        UNIPROT_PROTEOMES_FILE,
        expand(UNIPROT_KB_XML_FILE, zip, **EXPAND_PARAMS),
        expand(UNIPROT_KB_FASTA_FILE, zip, **EXPAND_PARAMS),
        UNIPROT_KB_MERGED_FASTA_FILE,
        expand(UNIPROT_KB_XML_SPLIT_POS_FILE, zip, **EXPAND_PARAMS),
        UNIPROT_KB_DBXREF_FILE,
        UNIPROT_KB_IDMAP_FILE,
        UNIPROT_KB_GENBANK_IDMAP_FILE,
        expand(UNIPROT_KB_GENBANK_IDMAP_DBXREF_FILE, zip, **EXPAND_PARAMS),
        UNIPROT_KB_TAXID_MAP_FILE,
        NCBI_TAXDUMP_ZIP_FILE,
        NCBI_TAXDUMP_FILES,
        NCBI_TAXDUMP_FIXED_NODE_FILE,
        expand(NCBI_ACC2TAXID_FILE, zip, **EXPAND_PARAMS),
        DIAMOND_UNIPROT_DB_FILE,
        PALADIN_UNIPROT_INDEX_DIR,
        expand(NCBI_ASSEMBLY_SUMMARY_FILE, zip, **EXPAND_PARAMS),
        NCBI_ASSEMBLY_MERGED_SUMMARY_FILE,
        NCBI_ASSEMBLY_FILTERED_SUMMARY_FILE,
        NCBI_ASSEMBLY_TAXID_MAP_FILE,
        NCBI_ASSEMBLY_DIR,
        expand(NCBI_ASSEMBLY_FASTA_LIST_FILE, zip, **EXPAND_PARAMS),
        NCBI_ASSEMBLY_MERGED_CDS_GTF_FILE,
        expand(GENCODE_GENOME_FASTA_FILE, zip, **EXPAND_PARAMS),
        expand(GENCODE_GENOME_FIXED_FASTA_FILE, zip, **EXPAND_PARAMS),
        expand(GENCODE_GENOME_FIXED_FASTA_ID_FILE, zip, **EXPAND_PARAMS),
        GENCODE_GENOME_MERGED_FIXED_FASTA_ID_FILE,
        expand(GENCODE_GENOME_ANNOT_FILE, zip, **EXPAND_PARAMS),
        T2T_GENOME_FASTA_FILE,
        HOST_GENOME_INDEX_DIR,
        expand(REF_FASTA_FILE, zip, **EXPAND_PARAMS),
        expand(REF_DEDUPED_ID_FASTA_FILE, zip, **EXPAND_PARAMS),
        expand(REF_DEDUPED_ID_WITH_DECOY_FASTA_FILE, zip, **EXPAND_PARAMS),
        expand(PUFFERFISH_INDEX_DIR, zip, **EXPAND_PARAMS),
        expand(TRIMMED_FASTQ1_FILE, zip, **EXPAND_PARAMS),
        expand(TRIMMED_FASTQ2_FILE, zip, **EXPAND_PARAMS),
        expand(PUFFERFISH_ALIGN_FILE, **EXPAND_PARAMS),
        expand(PUFFERFISH_UNMAPPED_BAM_FILE, zip, **EXPAND_PARAMS),
        expand(PUFFERFISH_UNMAPPED_FASTQ_FILE, zip, **EXPAND_PARAMS),
        expand(FEATURECOUNTS_CDS_READ_QUANT_FILE, zip, **EXPAND_PARAMS),
        expand(FEATURECOUNTS_CDS_COUNT_MATRIX_FILE, zip, **EXPAND_PARAMS),
        expand(FEATURECOUNTS_DBXREF_CDS_COUNT_MATRIX_FILE, **EXPAND_PARAMS),
        expand(CEDAR_TAX_READ_QUANT_FILE, zip, **EXPAND_PARAMS),
        expand(CEDAR_TAX_COUNT_MATRIX_FILE, zip, **EXPAND_PARAMS),
        expand(CEDAR_TAX_COUNT_ESET_FILE, zip, **EXPAND_PARAMS),


def clean(*dirs):
    for clean_dir in dirs:
        if exists(clean_dir):
            rmtree(clean_dir)
        for dirpath, dirnames, filenames in sorted(walk(getcwd())):
            for name in dirnames:
                if name == "__pycache__":
                    pycache_dir = join(dirpath, name)
                    if exists(pycache_dir):
                        rmtree(pycache_dir)


rule clean:
    run:
        clean(RESULTS_DIR, LOG_DIR)


rule clean_all:
    run:
        clean(RESOURCES_DIR, RESULTS_DIR, LOG_DIR)
