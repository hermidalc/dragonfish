import re
from glob import glob
from os import getcwd, mkdir, remove, walk
from os.path import exists, isdir, join, splitext
from shutil import rmtree

CONFIG_DIR = "config"
DATA_DIR = "data"
LOG_DIR = "logs"
RESOURCES_DIR = "resources"
RESULTS_DIR = "results"


configfile: join(CONFIG_DIR, "config.yaml")


NCBI_TAXONOMY_DIR = join(RESOURCES_DIR, "taxonomy")
NCBI_GENOME_DIR = join(RESOURCES_DIR, "genomes")
NCBI_ASSEMBLY_DIR = join(NCBI_GENOME_DIR, "assemblies")
UNIPROT_DIR = join(RESOURCES_DIR, "uniprot")

NCBI_API_EMAIL = config["ncbi"]["api_email"]
NCBI_API_KEY = config["ncbi"]["api_key"]

NCBI_ACC2TAXID_URL = config["ncbi"]["acc2taxid_url"]
NCBI_ACC2TAXID_GZ_FILENAMES = config["ncbi"]["acc2taxid"]["gz_filenames"]
NCBI_TAXDUMP_URL = config["ncbi"]["taxdump"]["url"]
NCBI_TAXDUMP_ZIP_FILENAME = config["ncbi"]["taxdump"]["zip_filename"]
NCBI_TAXDUMP_FILENAMES = config["ncbi"]["taxdump"]["filenames"]

NCBI_ASSEMBLY_SUMMARY_URL = config["ncbi"]["assembly"]["summary_url"]
NCBI_ASSEMBLY_SUMMARY_FILENAMES = config["ncbi"]["assembly"]["summary_filenames"]
NCBI_ASSEMBLY_GZ_FILE_EXTS = config["ncbi"]["assembly"]["gz_file_exts"]
UNIPROT_PROTEOME_METADATA_URL = config["uniprot"]["proteome"]["metadata_url"]

NCBI_ACC2TAXID_FILENAMES = [
    splitext(filename)[0] for filename in NCBI_ACC2TAXID_GZ_FILENAMES
]
NCBI_ACC2TAXID_GZ_URL = join(NCBI_ACC2TAXID_URL, "{a2t_filename}.gz")
NCBI_ACC2TAXID_GZ_FILE = join(NCBI_TAXONOMY_DIR, "{a2t_filename}.gz")
NCBI_ACC2TAXID_FILE = join(NCBI_TAXONOMY_DIR, "{a2t_filename}")
NCBI_TAXDUMP_ZIP_URL = join(NCBI_TAXDUMP_URL, NCBI_TAXDUMP_ZIP_FILENAME)
NCBI_TAXDUMP_ZIP_FILE = join(NCBI_TAXONOMY_DIR, NCBI_TAXDUMP_ZIP_FILENAME)
NCBI_TAXDUMP_FILES = [
    join(NCBI_TAXONOMY_DIR, filename) for filename in NCBI_TAXDUMP_FILENAMES
]
NCBI_ASSEMBLY_SUMMARY_BASENAMES, NCBI_ASSEMBLY_SUMMARY_EXTS = zip(
    *(
        (splitext(filename)[0], splitext(filename)[1].replace(".", "", 1))
        for filename in NCBI_ASSEMBLY_SUMMARY_FILENAMES
    )
)
NCBI_ASSEMBLY_SUMMARY_FILE_URL = join(
    NCBI_ASSEMBLY_SUMMARY_URL, "{asu_basename}.{asu_ext}"
)
NCBI_ASSEMBLY_SUMMARY_FILE = join(NCBI_GENOME_DIR, "{asu_basename}.{asu_ext}")
NCBI_ASSEMBLY_SUMMARY_FILES = [
    join(NCBI_GENOME_DIR, filename) for filename in NCBI_ASSEMBLY_SUMMARY_FILENAMES
]
NCBI_MERGED_ASSEMBLY_SUMMARY_FILE = join(NCBI_GENOME_DIR, "assembly_summary_merged.txt")
UNIPROT_PROTEOME_METADATA_FILE = join(UNIPROT_DIR, "uniprot_proteome_metadata.tsv")
NCBI_ASSEMBLY_GZ_FILE = join(NCBI_ASSEMBLY_DIR, "{asm_basename}.{asm_ext}.gz")
NCBI_ASSEMBLY_FILE = join(NCBI_ASSEMBLY_DIR, "{asm_basename}.{asm_ext}")
NCBI_ASSEMBLY_EXTS = [
    splitext(ext)[1].replace(".", "", 1) for ext in NCBI_ASSEMBLY_GZ_FILE_EXTS
]

NCBI_ACC2TAXID_GZ_LOG = join(LOG_DIR, "get_{a2t_filename}_gz.log")
NCBI_ACC2TAXID_LOG = join(LOG_DIR, "gunzip_{a2t_filename}_gz.log")
NCBI_TAXDUMP_ZIP_LOG = join(LOG_DIR, "get_ncbi_taxdump_zip.log")
NCBI_TAXDUMP_FILES_LOG = join(LOG_DIR, "unzip_ncbi_taxdump.log")
NCBI_ASSEMBLY_SUMMARY_LOG = join(LOG_DIR, "get_{asu_basename}_{asu_ext}.log")
NCBI_MERGED_ASSEMBLY_SUMMARY_LOG = join(LOG_DIR, "merge_ncbi_assembly_summaries.log")
UNIPROT_PROTEOME_METADATA_LOG = join(LOG_DIR, "get_uniprot_proteome_metadata.log")
NCBI_ASSEMBLY_GZ_FILES_LOG = join(LOG_DIR, "get_ncbi_assembly_gz_files.log")
NCBI_ASSEMBLY_FILE_LOG = join(LOG_DIR, "gunzip_{asm_basename}_{asm_ext}_gz.log")


include: "rules/resources.smk"


if not exists(LOG_DIR):
    mkdir(LOG_DIR, mode=0o755)


wildcard_constraints:
    asu_basename="|".join(set(re.escape(NCBI_ASSEMBLY_SUMMARY_BASENAMES))),
    asu_ext="|".join(set(re.escape(NCBI_ASSEMBLY_SUMMARY_EXTS))),
    a2t_filename="|".join(set(re.escape(NCBI_ACC2TAXID_FILENAMES))),


rule all:
    input:
        expand(NCBI_ACC2TAXID_GZ_FILE, zip, a2t_filename=NCBI_ACC2TAXID_FILENAMES),
        expand(NCBI_ACC2TAXID_FILE, zip, a2t_filename=NCBI_ACC2TAXID_FILENAMES),
        NCBI_TAXDUMP_ZIP_FILE,
        NCBI_TAXDUMP_FILES,
        expand(
            NCBI_ASSEMBLY_SUMMARY_FILE,
            zip,
            asu_basename=NCBI_ASSEMBLY_SUMMARY_BASENAMES,
            asu_ext=NCBI_ASSEMBLY_SUMMARY_EXTS,
        ),
        NCBI_MERGED_ASSEMBLY_SUMMARY_FILE,
        UNIPROT_PROTEOME_METADATA_FILE,
        join(NCBI_GENOME_DIR, "aggregated.txt"),


def clean(*dirs):
    for clean_dir in dirs:
        for file in glob(join(clean_dir, "*")):
            if isdir(file):
                rmtree(file)
            else:
                remove(file)
        for dirpath, dirnames, filenames in sorted(walk(getcwd())):
            for name in dirnames:
                if name == "__pycache__":
                    rmtree(join(dirpath, name))


rule clean:
    run:
        clean(RESULTS_DIR, LOG_DIR)


rule clean_all:
    run:
        clean(RESOURCES_DIR, RESULTS_DIR, LOG_DIR)
